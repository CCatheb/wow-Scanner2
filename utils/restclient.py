import os
import json
import requests
from requests.structures import CaseInsensitiveDict

class RestClient:

    def __init__(self):
        self.url = "https://eu.api.blizzard.com/"
        self.access_token = None
        self.realm_id = None
        self.server = None
        self.credentials = None

    def _check_response(self, response, url):
        if not response.ok:
            raise AssertionError ("Request to {0} got a wrong code: {1}".format(url, response.status_code))

    def get(self, url, timeout=10, params=None):
        r = requests.get(url=url, timeout=timeout, params=params)
        self._check_response(r, url)
        return (r.status_code, r.json())

    def post(self, url, data=None, auth=None, timeout=20):
        r = requests.post(url, data=data, auth=auth, timeout=timeout)
        self._check_response(r, url)
        return (r.status_code, r.json())

    def get_access_token(self, client_id, client_secret):
        """ Generates an acces token for the WoW API

            Parameters
            ----------
            client_id (str)
                Client ID given by the WoW Developpers portal
            client_secret(str)
                Client secret given by the WoW Developpers portal

            Returns
            -------
            code (int)
                HTTP reponse code
            content
                The content of the answer of the server, containing the token
        """


        url = "https://eu.battle.net/oauth/token"
        data = {'grant_type': 'client_credentials'}
        auth = {str(client_id):str(client_secret)}
        (code, content) = self.post(url=url, data=data, auth=(client_id, client_secret))
        self.access_token = content['access_token']
        return (code, content)


    def get_realm_id(self, server_name, access_token):
        """ Find the Realm ID using the WoW API

            Parameters
            ----------
            server_name (str)
                Name of the server (in french)
            access_token (str)
                Token generated by "get_access_token()"

            Returns
            -------
            code (int)
                HTTP reponse code
            data (int)
                Realm ID
        """
        url = self.url + "data/wow/search/connected-realm"
        access_token = self.access_token
        params = { 'namespace' : 'dynamic-eu',
                   'realms.name.fr_FR' : '',
                   'access_token'  :''}
        params['realms.name.fr_FR'] = server_name
        params['access_token'] = access_token
        (status, data) = self.get(url, params=params)

        try:
            return (status, data["results"][0]["data"]["id"])
        except IndexError:
            print("Server '{}' not found.".format(server_name))
            return (0,None)



    def setup(self):

        print("\nGetting credentials from api_ids.json file...")
        try:
            f = open("utils/api_ids.json",'r')
            self.credentials = json.load(f)
            print("Done.")
        except IOError:
            print("File api_ids.json not found in directory '{}'. Please create the file.".format(os.path.dirname(os.path.realpath(__file__))))
            return



        print("\nAPI Token Setup")
        if self.access_token is None:
            print("No access token found.\nGenerating a new one.")
            self.get_access_token(self.credentials['blizzard']['client_id'], self.credentials['blizzard']['client_secret'])
            if self.access_token is not None:
                print("Token generated.")
                print("Done.")

        print("\nRealm Setup")
        # if self.realm_id is None:
        #     print("No Realm ID found.")
        #     self.server = input("Server name ? ")
        #     self.server = self.server.lower()
        #     (status, data) = self.get_realm_id(self.server, self.access_token)
        #     self.realm_id = data

        # if self.realm_id is not None:
        #     print("Realm ID found for server " + self.server + ": " + str(self.realm_id))
        # else:
        #     print("Realm ID not found for server " + self.server)
        # print("\nDone.")
        print("--- Setup done. ---")


    def get_token_value(self):
        """ Make a request to the API to get the current WoW Token value.
        The function returns the token value using the same way as the API.

        For example, if the token is worth 100 golds, the value returned will be
        1000000 (100 golds, 00 silver, 00 copper)

            Parameters
            ----------
            Nothing

            Returns
            -------
            data (int)
                Current Token value
        """

        url = self.url + "data/wow/token/index"
        params = { 'namespace' : 'dynamic-eu',
                   'locale' : 'fr_FR',
                   'access_token' : ''}
        params['access_token'] = self.access_token
        (status, data) = self.get(url, params=params)
        return (data["price"]/10000)


    def get_auctions(self):
        """ Performs a request on the API to get all the actual auctions available
        on the specified server.

            Parameters
            ----------
            Nothing

            Returns
            -------
            data (dict)
                Dict containing multiple lists and dicts with all the auctions data
            in it.
        """

        url = self.url + "data/wow/connected-realm/" + str(self.realm_id) + "/auctions"
        params =  { 'namespace':'dynamic-eu',
                    'locale' : 'fr_FR',
                    'access_token' : ''}
        params['access_token'] = self.access_token

        (status, data) = self.get(url, params=params)
        data = data["auctions"]
        print("Number of auctions: " + str(len(data)))
        return data




def pig():
    print("""
     __   __
     \/---\/
      ). .(
     ( (") )
      )   (
     /     \
    (       )`
   ( \ /-\ / )
    w'W   W'w
    """)
